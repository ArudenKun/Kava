// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Kava.Data.Compiled
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var attachment = AttachmentEntityType.Create(this);
            var board = BoardEntityType.Create(this);
            var card = CardEntityType.Create(this);
            var category = CategoryEntityType.Create(this);
            var comment = CommentEntityType.Create(this);

            AttachmentEntityType.CreateForeignKey1(attachment, card);
            CardEntityType.CreateForeignKey1(card, category);
            CategoryEntityType.CreateForeignKey1(category, board);
            CommentEntityType.CreateForeignKey1(comment, card);

            AttachmentEntityType.CreateAnnotations(attachment);
            BoardEntityType.CreateAnnotations(board);
            CardEntityType.CreateAnnotations(card);
            CategoryEntityType.CreateAnnotations(category);
            CommentEntityType.CreateAnnotations(comment);

            AddAnnotation("ProductVersion", "8.0.10");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var attachment = FindEntityType("Kava.Core.Models.Attachment")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            attachment.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var kavaCoreModelsAttachmentTableBase = new TableBase("Kava.Core.Models.Attachment", null, relationalModel);
            var cardIdColumnBase = new ColumnBase<ColumnMappingBase>("CardId", "TEXT", kavaCoreModelsAttachmentTableBase);
            kavaCoreModelsAttachmentTableBase.Columns.Add("CardId", cardIdColumnBase);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "TEXT", kavaCoreModelsAttachmentTableBase);
            kavaCoreModelsAttachmentTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", kavaCoreModelsAttachmentTableBase);
            kavaCoreModelsAttachmentTableBase.Columns.Add("Id", idColumnBase);
            var mimeTypeColumnBase = new ColumnBase<ColumnMappingBase>("MimeType", "TEXT", kavaCoreModelsAttachmentTableBase);
            kavaCoreModelsAttachmentTableBase.Columns.Add("MimeType", mimeTypeColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", kavaCoreModelsAttachmentTableBase);
            kavaCoreModelsAttachmentTableBase.Columns.Add("Name", nameColumnBase);
            var sizeColumnBase = new ColumnBase<ColumnMappingBase>("Size", "INTEGER", kavaCoreModelsAttachmentTableBase);
            kavaCoreModelsAttachmentTableBase.Columns.Add("Size", sizeColumnBase);
            var updatedAtColumnBase = new ColumnBase<ColumnMappingBase>("UpdatedAt", "TEXT", kavaCoreModelsAttachmentTableBase);
            kavaCoreModelsAttachmentTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase);
            relationalModel.DefaultTables.Add("Kava.Core.Models.Attachment", kavaCoreModelsAttachmentTableBase);
            var kavaCoreModelsAttachmentMappingBase = new TableMappingBase<ColumnMappingBase>(attachment, kavaCoreModelsAttachmentTableBase, true);
            kavaCoreModelsAttachmentTableBase.AddTypeMapping(kavaCoreModelsAttachmentMappingBase, false);
            defaultTableMappings.Add(kavaCoreModelsAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, attachment.FindProperty("Id")!, kavaCoreModelsAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cardIdColumnBase, attachment.FindProperty("CardId")!, kavaCoreModelsAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, attachment.FindProperty("CreatedAt")!, kavaCoreModelsAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mimeTypeColumnBase, attachment.FindProperty("MimeType")!, kavaCoreModelsAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, attachment.FindProperty("Name")!, kavaCoreModelsAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sizeColumnBase, attachment.FindProperty("Size")!, kavaCoreModelsAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase, attachment.FindProperty("UpdatedAt")!, kavaCoreModelsAttachmentMappingBase);

            var tableMappings = new List<TableMapping>();
            attachment.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var attachmentsTable = new Table("Attachments", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", attachmentsTable);
            attachmentsTable.Columns.Add("Id", idColumn);
            var cardIdColumn = new Column("CardId", "TEXT", attachmentsTable);
            attachmentsTable.Columns.Add("CardId", cardIdColumn);
            var createdAtColumn = new Column("CreatedAt", "TEXT", attachmentsTable);
            attachmentsTable.Columns.Add("CreatedAt", createdAtColumn);
            var mimeTypeColumn = new Column("MimeType", "TEXT", attachmentsTable);
            attachmentsTable.Columns.Add("MimeType", mimeTypeColumn);
            var nameColumn = new Column("Name", "TEXT", attachmentsTable);
            attachmentsTable.Columns.Add("Name", nameColumn);
            var sizeColumn = new Column("Size", "INTEGER", attachmentsTable);
            attachmentsTable.Columns.Add("Size", sizeColumn);
            var updatedAtColumn = new Column("UpdatedAt", "TEXT", attachmentsTable);
            attachmentsTable.Columns.Add("UpdatedAt", updatedAtColumn);
            var pK_Attachments = new UniqueConstraint("PK_Attachments", attachmentsTable, new[] { idColumn });
            attachmentsTable.PrimaryKey = pK_Attachments;
            var pK_AttachmentsUc = RelationalModel.GetKey(this,
                "Kava.Core.Models.Attachment",
                new[] { "Id" });
            pK_Attachments.MappedKeys.Add(pK_AttachmentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AttachmentsUc).Add(pK_Attachments);
            attachmentsTable.UniqueConstraints.Add("PK_Attachments", pK_Attachments);
            var iX_Attachments_CardId = new TableIndex(
            "IX_Attachments_CardId", attachmentsTable, new[] { cardIdColumn }, false);
            var iX_Attachments_CardIdIx = RelationalModel.GetIndex(this,
                "Kava.Core.Models.Attachment",
                new[] { "CardId" });
            iX_Attachments_CardId.MappedIndexes.Add(iX_Attachments_CardIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Attachments_CardIdIx).Add(iX_Attachments_CardId);
            attachmentsTable.Indexes.Add("IX_Attachments_CardId", iX_Attachments_CardId);
            relationalModel.Tables.Add(("Attachments", null), attachmentsTable);
            var attachmentsTableMapping = new TableMapping(attachment, attachmentsTable, true);
            attachmentsTable.AddTypeMapping(attachmentsTableMapping, false);
            tableMappings.Add(attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, attachment.FindProperty("Id")!, attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(cardIdColumn, attachment.FindProperty("CardId")!, attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, attachment.FindProperty("CreatedAt")!, attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(mimeTypeColumn, attachment.FindProperty("MimeType")!, attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, attachment.FindProperty("Name")!, attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(sizeColumn, attachment.FindProperty("Size")!, attachmentsTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn, attachment.FindProperty("UpdatedAt")!, attachmentsTableMapping);

            var board = FindEntityType("Kava.Core.Models.Board")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            board.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var kavaCoreModelsBoardTableBase = new TableBase("Kava.Core.Models.Board", null, relationalModel);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "TEXT", kavaCoreModelsBoardTableBase);
            kavaCoreModelsBoardTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", kavaCoreModelsBoardTableBase);
            kavaCoreModelsBoardTableBase.Columns.Add("Id", idColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", kavaCoreModelsBoardTableBase);
            kavaCoreModelsBoardTableBase.Columns.Add("Name", nameColumnBase0);
            var updatedAtColumnBase0 = new ColumnBase<ColumnMappingBase>("UpdatedAt", "TEXT", kavaCoreModelsBoardTableBase);
            kavaCoreModelsBoardTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase0);
            relationalModel.DefaultTables.Add("Kava.Core.Models.Board", kavaCoreModelsBoardTableBase);
            var kavaCoreModelsBoardMappingBase = new TableMappingBase<ColumnMappingBase>(board, kavaCoreModelsBoardTableBase, true);
            kavaCoreModelsBoardTableBase.AddTypeMapping(kavaCoreModelsBoardMappingBase, false);
            defaultTableMappings0.Add(kavaCoreModelsBoardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, board.FindProperty("Id")!, kavaCoreModelsBoardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, board.FindProperty("CreatedAt")!, kavaCoreModelsBoardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, board.FindProperty("Name")!, kavaCoreModelsBoardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase0, board.FindProperty("UpdatedAt")!, kavaCoreModelsBoardMappingBase);

            var tableMappings0 = new List<TableMapping>();
            board.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var boardsTable = new Table("Boards", null, relationalModel);
            var idColumn0 = new Column("Id", "TEXT", boardsTable);
            boardsTable.Columns.Add("Id", idColumn0);
            var createdAtColumn0 = new Column("CreatedAt", "TEXT", boardsTable);
            boardsTable.Columns.Add("CreatedAt", createdAtColumn0);
            var nameColumn0 = new Column("Name", "TEXT", boardsTable);
            boardsTable.Columns.Add("Name", nameColumn0);
            var updatedAtColumn0 = new Column("UpdatedAt", "TEXT", boardsTable);
            boardsTable.Columns.Add("UpdatedAt", updatedAtColumn0);
            var pK_Boards = new UniqueConstraint("PK_Boards", boardsTable, new[] { idColumn0 });
            boardsTable.PrimaryKey = pK_Boards;
            var pK_BoardsUc = RelationalModel.GetKey(this,
                "Kava.Core.Models.Board",
                new[] { "Id" });
            pK_Boards.MappedKeys.Add(pK_BoardsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BoardsUc).Add(pK_Boards);
            boardsTable.UniqueConstraints.Add("PK_Boards", pK_Boards);
            relationalModel.Tables.Add(("Boards", null), boardsTable);
            var boardsTableMapping = new TableMapping(board, boardsTable, true);
            boardsTable.AddTypeMapping(boardsTableMapping, false);
            tableMappings0.Add(boardsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, board.FindProperty("Id")!, boardsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, board.FindProperty("CreatedAt")!, boardsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, board.FindProperty("Name")!, boardsTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn0, board.FindProperty("UpdatedAt")!, boardsTableMapping);

            var card = FindEntityType("Kava.Core.Models.Card")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            card.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var kavaCoreModelsCardTableBase = new TableBase("Kava.Core.Models.Card", null, relationalModel);
            var categoryIdColumnBase = new ColumnBase<ColumnMappingBase>("CategoryId", "TEXT", kavaCoreModelsCardTableBase);
            kavaCoreModelsCardTableBase.Columns.Add("CategoryId", categoryIdColumnBase);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "TEXT", kavaCoreModelsCardTableBase);
            kavaCoreModelsCardTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", kavaCoreModelsCardTableBase);
            kavaCoreModelsCardTableBase.Columns.Add("Id", idColumnBase1);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", kavaCoreModelsCardTableBase);
            kavaCoreModelsCardTableBase.Columns.Add("Name", nameColumnBase1);
            var updatedAtColumnBase1 = new ColumnBase<ColumnMappingBase>("UpdatedAt", "TEXT", kavaCoreModelsCardTableBase);
            kavaCoreModelsCardTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase1);
            relationalModel.DefaultTables.Add("Kava.Core.Models.Card", kavaCoreModelsCardTableBase);
            var kavaCoreModelsCardMappingBase = new TableMappingBase<ColumnMappingBase>(card, kavaCoreModelsCardTableBase, true);
            kavaCoreModelsCardTableBase.AddTypeMapping(kavaCoreModelsCardMappingBase, false);
            defaultTableMappings1.Add(kavaCoreModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, card.FindProperty("Id")!, kavaCoreModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryIdColumnBase, card.FindProperty("CategoryId")!, kavaCoreModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, card.FindProperty("CreatedAt")!, kavaCoreModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, card.FindProperty("Name")!, kavaCoreModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase1, card.FindProperty("UpdatedAt")!, kavaCoreModelsCardMappingBase);

            var tableMappings1 = new List<TableMapping>();
            card.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var cardsTable = new Table("Cards", null, relationalModel);
            var idColumn1 = new Column("Id", "TEXT", cardsTable);
            cardsTable.Columns.Add("Id", idColumn1);
            var categoryIdColumn = new Column("CategoryId", "TEXT", cardsTable);
            cardsTable.Columns.Add("CategoryId", categoryIdColumn);
            var createdAtColumn1 = new Column("CreatedAt", "TEXT", cardsTable);
            cardsTable.Columns.Add("CreatedAt", createdAtColumn1);
            var nameColumn1 = new Column("Name", "TEXT", cardsTable);
            cardsTable.Columns.Add("Name", nameColumn1);
            var updatedAtColumn1 = new Column("UpdatedAt", "TEXT", cardsTable);
            cardsTable.Columns.Add("UpdatedAt", updatedAtColumn1);
            var pK_Cards = new UniqueConstraint("PK_Cards", cardsTable, new[] { idColumn1 });
            cardsTable.PrimaryKey = pK_Cards;
            var pK_CardsUc = RelationalModel.GetKey(this,
                "Kava.Core.Models.Card",
                new[] { "Id" });
            pK_Cards.MappedKeys.Add(pK_CardsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CardsUc).Add(pK_Cards);
            cardsTable.UniqueConstraints.Add("PK_Cards", pK_Cards);
            var iX_Cards_CategoryId = new TableIndex(
            "IX_Cards_CategoryId", cardsTable, new[] { categoryIdColumn }, false);
            var iX_Cards_CategoryIdIx = RelationalModel.GetIndex(this,
                "Kava.Core.Models.Card",
                new[] { "CategoryId" });
            iX_Cards_CategoryId.MappedIndexes.Add(iX_Cards_CategoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Cards_CategoryIdIx).Add(iX_Cards_CategoryId);
            cardsTable.Indexes.Add("IX_Cards_CategoryId", iX_Cards_CategoryId);
            relationalModel.Tables.Add(("Cards", null), cardsTable);
            var cardsTableMapping = new TableMapping(card, cardsTable, true);
            cardsTable.AddTypeMapping(cardsTableMapping, false);
            tableMappings1.Add(cardsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, card.FindProperty("Id")!, cardsTableMapping);
            RelationalModel.CreateColumnMapping(categoryIdColumn, card.FindProperty("CategoryId")!, cardsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn1, card.FindProperty("CreatedAt")!, cardsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, card.FindProperty("Name")!, cardsTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn1, card.FindProperty("UpdatedAt")!, cardsTableMapping);

            var category = FindEntityType("Kava.Core.Models.Category")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var kavaCoreModelsCategoryTableBase = new TableBase("Kava.Core.Models.Category", null, relationalModel);
            var boardIdColumnBase = new ColumnBase<ColumnMappingBase>("BoardId", "TEXT", kavaCoreModelsCategoryTableBase);
            kavaCoreModelsCategoryTableBase.Columns.Add("BoardId", boardIdColumnBase);
            var createdAtColumnBase2 = new ColumnBase<ColumnMappingBase>("CreatedAt", "TEXT", kavaCoreModelsCategoryTableBase);
            kavaCoreModelsCategoryTableBase.Columns.Add("CreatedAt", createdAtColumnBase2);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "TEXT", kavaCoreModelsCategoryTableBase)
            {
                IsNullable = true
            };
            kavaCoreModelsCategoryTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", kavaCoreModelsCategoryTableBase);
            kavaCoreModelsCategoryTableBase.Columns.Add("Id", idColumnBase2);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", kavaCoreModelsCategoryTableBase);
            kavaCoreModelsCategoryTableBase.Columns.Add("Name", nameColumnBase2);
            var updatedAtColumnBase2 = new ColumnBase<ColumnMappingBase>("UpdatedAt", "TEXT", kavaCoreModelsCategoryTableBase);
            kavaCoreModelsCategoryTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase2);
            relationalModel.DefaultTables.Add("Kava.Core.Models.Category", kavaCoreModelsCategoryTableBase);
            var kavaCoreModelsCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, kavaCoreModelsCategoryTableBase, true);
            kavaCoreModelsCategoryTableBase.AddTypeMapping(kavaCoreModelsCategoryMappingBase, false);
            defaultTableMappings2.Add(kavaCoreModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, category.FindProperty("Id")!, kavaCoreModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)boardIdColumnBase, category.FindProperty("BoardId")!, kavaCoreModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase2, category.FindProperty("CreatedAt")!, kavaCoreModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, category.FindProperty("Description")!, kavaCoreModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, category.FindProperty("Name")!, kavaCoreModelsCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase2, category.FindProperty("UpdatedAt")!, kavaCoreModelsCategoryMappingBase);

            var tableMappings2 = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var categoriesTable = new Table("Categories", null, relationalModel);
            var idColumn2 = new Column("Id", "TEXT", categoriesTable);
            categoriesTable.Columns.Add("Id", idColumn2);
            var boardIdColumn = new Column("BoardId", "TEXT", categoriesTable);
            categoriesTable.Columns.Add("BoardId", boardIdColumn);
            var createdAtColumn2 = new Column("CreatedAt", "TEXT", categoriesTable);
            categoriesTable.Columns.Add("CreatedAt", createdAtColumn2);
            var descriptionColumn = new Column("Description", "TEXT", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("Description", descriptionColumn);
            var nameColumn2 = new Column("Name", "TEXT", categoriesTable);
            categoriesTable.Columns.Add("Name", nameColumn2);
            var updatedAtColumn2 = new Column("UpdatedAt", "TEXT", categoriesTable);
            categoriesTable.Columns.Add("UpdatedAt", updatedAtColumn2);
            var pK_Categories = new UniqueConstraint("PK_Categories", categoriesTable, new[] { idColumn2 });
            categoriesTable.PrimaryKey = pK_Categories;
            var pK_CategoriesUc = RelationalModel.GetKey(this,
                "Kava.Core.Models.Category",
                new[] { "Id" });
            pK_Categories.MappedKeys.Add(pK_CategoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CategoriesUc).Add(pK_Categories);
            categoriesTable.UniqueConstraints.Add("PK_Categories", pK_Categories);
            var iX_Categories_BoardId = new TableIndex(
            "IX_Categories_BoardId", categoriesTable, new[] { boardIdColumn }, false);
            var iX_Categories_BoardIdIx = RelationalModel.GetIndex(this,
                "Kava.Core.Models.Category",
                new[] { "BoardId" });
            iX_Categories_BoardId.MappedIndexes.Add(iX_Categories_BoardIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Categories_BoardIdIx).Add(iX_Categories_BoardId);
            categoriesTable.Indexes.Add("IX_Categories_BoardId", iX_Categories_BoardId);
            relationalModel.Tables.Add(("Categories", null), categoriesTable);
            var categoriesTableMapping = new TableMapping(category, categoriesTable, true);
            categoriesTable.AddTypeMapping(categoriesTableMapping, false);
            tableMappings2.Add(categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, category.FindProperty("Id")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(boardIdColumn, category.FindProperty("BoardId")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn2, category.FindProperty("CreatedAt")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, category.FindProperty("Description")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, category.FindProperty("Name")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn2, category.FindProperty("UpdatedAt")!, categoriesTableMapping);

            var comment = FindEntityType("Kava.Core.Models.Comment")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            comment.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var kavaCoreModelsCommentTableBase = new TableBase("Kava.Core.Models.Comment", null, relationalModel);
            var cardIdColumnBase0 = new ColumnBase<ColumnMappingBase>("CardId", "TEXT", kavaCoreModelsCommentTableBase);
            kavaCoreModelsCommentTableBase.Columns.Add("CardId", cardIdColumnBase0);
            var contentColumnBase = new ColumnBase<ColumnMappingBase>("Content", "TEXT", kavaCoreModelsCommentTableBase);
            kavaCoreModelsCommentTableBase.Columns.Add("Content", contentColumnBase);
            var createdAtColumnBase3 = new ColumnBase<ColumnMappingBase>("CreatedAt", "TEXT", kavaCoreModelsCommentTableBase);
            kavaCoreModelsCommentTableBase.Columns.Add("CreatedAt", createdAtColumnBase3);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", kavaCoreModelsCommentTableBase);
            kavaCoreModelsCommentTableBase.Columns.Add("Id", idColumnBase3);
            var updatedAtColumnBase3 = new ColumnBase<ColumnMappingBase>("UpdatedAt", "TEXT", kavaCoreModelsCommentTableBase);
            kavaCoreModelsCommentTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase3);
            relationalModel.DefaultTables.Add("Kava.Core.Models.Comment", kavaCoreModelsCommentTableBase);
            var kavaCoreModelsCommentMappingBase = new TableMappingBase<ColumnMappingBase>(comment, kavaCoreModelsCommentTableBase, true);
            kavaCoreModelsCommentTableBase.AddTypeMapping(kavaCoreModelsCommentMappingBase, false);
            defaultTableMappings3.Add(kavaCoreModelsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, comment.FindProperty("Id")!, kavaCoreModelsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cardIdColumnBase0, comment.FindProperty("CardId")!, kavaCoreModelsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase, comment.FindProperty("Content")!, kavaCoreModelsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase3, comment.FindProperty("CreatedAt")!, kavaCoreModelsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase3, comment.FindProperty("UpdatedAt")!, kavaCoreModelsCommentMappingBase);

            var tableMappings3 = new List<TableMapping>();
            comment.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var commentTable = new Table("Comment", null, relationalModel);
            var idColumn3 = new Column("Id", "TEXT", commentTable);
            commentTable.Columns.Add("Id", idColumn3);
            var cardIdColumn0 = new Column("CardId", "TEXT", commentTable);
            commentTable.Columns.Add("CardId", cardIdColumn0);
            var contentColumn = new Column("Content", "TEXT", commentTable);
            commentTable.Columns.Add("Content", contentColumn);
            var createdAtColumn3 = new Column("CreatedAt", "TEXT", commentTable);
            commentTable.Columns.Add("CreatedAt", createdAtColumn3);
            var updatedAtColumn3 = new Column("UpdatedAt", "TEXT", commentTable);
            commentTable.Columns.Add("UpdatedAt", updatedAtColumn3);
            var pK_Comment = new UniqueConstraint("PK_Comment", commentTable, new[] { idColumn3 });
            commentTable.PrimaryKey = pK_Comment;
            var pK_CommentUc = RelationalModel.GetKey(this,
                "Kava.Core.Models.Comment",
                new[] { "Id" });
            pK_Comment.MappedKeys.Add(pK_CommentUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CommentUc).Add(pK_Comment);
            commentTable.UniqueConstraints.Add("PK_Comment", pK_Comment);
            var iX_Comment_CardId = new TableIndex(
            "IX_Comment_CardId", commentTable, new[] { cardIdColumn0 }, false);
            var iX_Comment_CardIdIx = RelationalModel.GetIndex(this,
                "Kava.Core.Models.Comment",
                new[] { "CardId" });
            iX_Comment_CardId.MappedIndexes.Add(iX_Comment_CardIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Comment_CardIdIx).Add(iX_Comment_CardId);
            commentTable.Indexes.Add("IX_Comment_CardId", iX_Comment_CardId);
            relationalModel.Tables.Add(("Comment", null), commentTable);
            var commentTableMapping = new TableMapping(comment, commentTable, true);
            commentTable.AddTypeMapping(commentTableMapping, false);
            tableMappings3.Add(commentTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, comment.FindProperty("Id")!, commentTableMapping);
            RelationalModel.CreateColumnMapping(cardIdColumn0, comment.FindProperty("CardId")!, commentTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn, comment.FindProperty("Content")!, commentTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn3, comment.FindProperty("CreatedAt")!, commentTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn3, comment.FindProperty("UpdatedAt")!, commentTableMapping);
            var fK_Attachments_Cards_CardId = new ForeignKeyConstraint(
                "FK_Attachments_Cards_CardId", attachmentsTable, cardsTable,
                new[] { cardIdColumn },
                cardsTable.FindUniqueConstraint("PK_Cards")!, ReferentialAction.Cascade);
            var fK_Attachments_Cards_CardIdFk = RelationalModel.GetForeignKey(this,
                "Kava.Core.Models.Attachment",
                new[] { "CardId" },
                "Kava.Core.Models.Card",
                new[] { "Id" });
            fK_Attachments_Cards_CardId.MappedForeignKeys.Add(fK_Attachments_Cards_CardIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Attachments_Cards_CardIdFk).Add(fK_Attachments_Cards_CardId);
            attachmentsTable.ForeignKeyConstraints.Add(fK_Attachments_Cards_CardId);
            cardsTable.ReferencingForeignKeyConstraints.Add(fK_Attachments_Cards_CardId);
            var fK_Cards_Categories_CategoryId = new ForeignKeyConstraint(
                "FK_Cards_Categories_CategoryId", cardsTable, categoriesTable,
                new[] { categoryIdColumn },
                categoriesTable.FindUniqueConstraint("PK_Categories")!, ReferentialAction.Cascade);
            var fK_Cards_Categories_CategoryIdFk = RelationalModel.GetForeignKey(this,
                "Kava.Core.Models.Card",
                new[] { "CategoryId" },
                "Kava.Core.Models.Category",
                new[] { "Id" });
            fK_Cards_Categories_CategoryId.MappedForeignKeys.Add(fK_Cards_Categories_CategoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Cards_Categories_CategoryIdFk).Add(fK_Cards_Categories_CategoryId);
            cardsTable.ForeignKeyConstraints.Add(fK_Cards_Categories_CategoryId);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fK_Cards_Categories_CategoryId);
            var fK_Categories_Boards_BoardId = new ForeignKeyConstraint(
                "FK_Categories_Boards_BoardId", categoriesTable, boardsTable,
                new[] { boardIdColumn },
                boardsTable.FindUniqueConstraint("PK_Boards")!, ReferentialAction.Cascade);
            var fK_Categories_Boards_BoardIdFk = RelationalModel.GetForeignKey(this,
                "Kava.Core.Models.Category",
                new[] { "BoardId" },
                "Kava.Core.Models.Board",
                new[] { "Id" });
            fK_Categories_Boards_BoardId.MappedForeignKeys.Add(fK_Categories_Boards_BoardIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Categories_Boards_BoardIdFk).Add(fK_Categories_Boards_BoardId);
            categoriesTable.ForeignKeyConstraints.Add(fK_Categories_Boards_BoardId);
            boardsTable.ReferencingForeignKeyConstraints.Add(fK_Categories_Boards_BoardId);
            var fK_Comment_Cards_CardId = new ForeignKeyConstraint(
                "FK_Comment_Cards_CardId", commentTable, cardsTable,
                new[] { cardIdColumn0 },
                cardsTable.FindUniqueConstraint("PK_Cards")!, ReferentialAction.NoAction);
            var fK_Comment_Cards_CardIdFk = RelationalModel.GetForeignKey(this,
                "Kava.Core.Models.Comment",
                new[] { "CardId" },
                "Kava.Core.Models.Card",
                new[] { "Id" });
            fK_Comment_Cards_CardId.MappedForeignKeys.Add(fK_Comment_Cards_CardIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Comment_Cards_CardIdFk).Add(fK_Comment_Cards_CardId);
            commentTable.ForeignKeyConstraints.Add(fK_Comment_Cards_CardId);
            cardsTable.ReferencingForeignKeyConstraints.Add(fK_Comment_Cards_CardId);
            return relationalModel.MakeReadOnly();
        }
    }
}
